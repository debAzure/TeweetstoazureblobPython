# Pythin code needs to be added as aprt of autimation runbook

import tweepy
import time
import json
from azure.storage.blob import BlobServiceClient
from tweepy.errors import TooManyRequests
from datetime import datetime
import requests
from requests.exceptions import ConnectionError

# Function to fetch tweets using Tweepy with retry handling for rate limits and connection errors
def fetch_top_tweets(query, max_tweets=10):
    # Set up the Tweepy client with automatic rate limit handling
    client = tweepy.Client(bearer_token='BEARER TOKEN DETAILS', wait_on_rate_limit=True)

    tweets = []
    retry_count = 0
    max_retries = 5  # Max retries for handling rate limits and connection errors
    
    # Fetch tweets using Paginator to handle pagination and rate limits automatically
    while retry_count < max_retries:
        try:
            for tweet in tweepy.Paginator(client.search_recent_tweets, query=query, tweet_fields=["created_at", "text"], max_results=100).flatten(limit=max_tweets):
                tweet_data = {
                    'id': tweet.id,
                    'text': tweet.text,
                    # Convert datetime to string (ISO 8601 format)
                    'created_at': tweet.created_at.isoformat() if tweet.created_at else None,
                }
                tweets.append(tweet_data)
            break  # Exit the loop if successful

        except TooManyRequests as e:
            # If rate limit is hit, handle the error and retry after 15 minutes
            retry_count += 1
            if retry_count < max_retries:
                print(f"Rate limit exceeded. Retrying in 15 minutes... Attempt {retry_count}/{max_retries}")
                time.sleep(15 * 60)  # Sleep for 15 minutes before retrying
            else:
                print("Max retries exceeded due to rate limits. Exiting...")
                break
        except ConnectionError as e:
            # If there is a connection issue, handle the error and retry
            retry_count += 1
            if retry_count < max_retries:
                print(f"Connection error encountered. Retrying in 10 seconds... Attempt {retry_count}/{max_retries}")
                time.sleep(10)  # Sleep for 10 seconds before retrying
            else:
                print("Max retries exceeded due to connection errors. Exiting...")
                break
        except Exception as e:
            print(f"An error occurred: {e}")
            break  # Exit on other unhandled errors

    return tweets

# Function to upload data to Azure Blob Storage
def upload_to_blob_storage(connection_string, container_name, blob_name, data):
    # Initialize the BlobServiceClient
    blob_service_client = BlobServiceClient.from_connection_string(connection_string)
    container_client = blob_service_client.get_container_client(container_name)

    # Check if the container exists, create it if not
    try:
        container_client.get_container_properties()  # Check if container exists
    except azure.core.exceptions.ResourceNotFoundError:
        container_client.create_container()  # Create container if not found
        print(f"Container '{container_name}' created.")

    # Upload the data to the blob
    blob_client = container_client.get_blob_client(blob_name)
    blob_client.upload_blob(json.dumps(data), overwrite=True)
    print(f"Data successfully uploaded to {container_name}/{blob_name}")

# Main function to tie everything together
def main():
    # Azure Blob Storage configuration
    blob_connection_string = 'Blob Storage configuration path'
    container_name = 'twiterdata001'  # Ensure this matches the container in Azure Blob Storage
    blob_name = 'tweets.json'  # You can customize the blob name based on your needs

    # Query to fetch tweets
    query = 'your search query'  # Set the search query for tweets
    tweets = fetch_top_tweets(query)

    # Upload the fetched tweets to Azure Blob Storage
    upload_to_blob_storage(blob_connection_string, container_name, blob_name, tweets)

if __name__ == "__main__":
    main()
